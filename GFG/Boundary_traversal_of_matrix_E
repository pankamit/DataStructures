#https://practice.geeksforgeeks.org/problems/boundary-traversal-of-matrix-1587115620/1

//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        int t = Integer.parseInt(in.readLine().trim());
        
        while(t-- > 0)
        {
            String s[] = in.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int a[][] = new int[n][m];
            s = in.readLine().trim().split(" ");
            int ind=0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    a[i][j] = Integer.parseInt(s[ind++]);
                }
            }
            Solution ob = new Solution();
            ArrayList<Integer> ans = ob.boundaryTraversal(a, n, m);
            for (int i : ans) {
                out.print(i + " ");
            }
            out.println();
        }
        out.close();
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    //Function to return list of integers that form the boundary 
    //traversal of the matrix in a clockwise manner.
    static ArrayList<Integer> boundaryTraversal(int matrix[][], int n, int m)
    {
        // code here
        ArrayList<Integer> lst = new ArrayList<>();
        
        if(n == 1){
            for(int ind=0;ind<m;ind++){
                lst.add(matrix[0][ind]);
            }
            return lst;
        }
        if(m == 1){
            for(int ind=0;ind<n;ind++){
                lst.add(matrix[ind][0]);
            }
            return lst;
        }
        
      //  System.out.println(" n "+n+" m "+m);
        for(int c=0;c<m-1;c++){
                lst.add(matrix[0][c]);
        }
    
//        System.out.println(lst);
        for(int r = 0;r <n-1;r++){
             lst.add(matrix[r][m-1]);
            
        }
        
  //      System.out.println(lst);
        for(int c=m-1;c >0;c--){
            lst.add(matrix[n-1][c]); 

        }
        
    //    System.out.println(lst);
        for(int r=n-1;r>0;r--){
                lst.add(matrix[r][0]);
        }
        
        
        return lst;
        
    }
}
